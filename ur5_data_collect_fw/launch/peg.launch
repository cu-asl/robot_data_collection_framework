<?xml version="1.0"?>
<launch>
    <!-- Configuration -->
    <arg name="rviz" default="true"/>
    <arg name="debug" default="false"/>
    <arg if="$(arg debug)" name="launch-prefix" value="screen -d -m gdb -command=$(env HOME)/.ros/my_debug_log --ex run --args"/>
    <arg unless="$(arg debug)" name="launch-prefix" value=""/>
    <arg name="limited" default="true" doc="If true, limits joint range [-PI, PI] on all joints."/>
    <arg name="paused" default="false" doc="Starts gazebo in paused mode"/>
    <arg name="gui" default="true" doc="Starts gazebo gui"/>
    <arg name="transmission_hw_interface" default="hardware_interface/PositionJointInterface"/>

    <!-- startup GAZEBO simulated world -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch" >
        <arg name="world_name" value="$(find ur5_data_collect_fw)/worlds/empty_kinect.world"/>
        <arg name="paused" value="$(arg paused)"/>
        <arg name="gui" value="$(arg gui)"/>    
    </include>

    <!-- Load robot_description to parameter server -->
    <param name="robot_description" command="$(find xacro)/xacro '$(find ur5_data_collect_fw)/urdf/ur5_peg.urdf.xacro'
transmission_hw_interface:=$(arg transmission_hw_interface)"/>

    <node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model robot 
-J shoulder_lift_joint -1.5708 -J elbow_joint 1.5708 -J wrist_1_joint -1.5708 -J wrist_2_joint -1.5708" respawn="false" output="screen"/>
    
    <!-- Load hardware configuration -->
    <rosparam file="$(find ur5_data_collect_fw)/config/peg_hw_config.yaml" command="load"></rosparam>
    <rosparam file="$(find ur_gazebo)/controller/arm_controller_ur5.yaml" command="load"/>

    <!-- Robot state publisher -->
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
            <param name="publish_frequency" type="double" value="50.0" />
            <param name="tf_prefix" type="string" value="" />
    </node>

    <!-- Joint state publisher -->
    <node name="joint_state_controller_spawner" pkg="controller_manager" type="spawner" args="joint_state_controller" respawn="true" output="screen"/>

    <!-- Load controller configuration -->
    <rosparam file="$(find ur5_data_collect_fw)/config/peg_cartesian_controllers.yaml" command="load"></rosparam>

    <!-- Spawn controllers -->
    <node name="arm_controller_spawner" pkg="controller_manager" type="spawner" args="--stopped arm_controller" />
    <node name="controller_spawner" pkg="controller_manager" type="spawner" args="my_cartesian_compliance_controller" />
    
    <!-- Spawn joint controller for testing my_joint_to_cartesian_controller  -->
    <!-- Note: This controller should be loaded and started -->
    <group ns="my_joint_to_cartesian_controller" >
            <node name="controller_spawner" pkg="controller_manager" type="spawner" args="joint_trajectory_controller" />
    </group>

    <include file="$(find ur5_peg_config)/launch/planning_execution.launch" />
    <!-- Visualization -->
    <group if="$(arg rviz)">
            <arg name="my_rviz" value="-d $(find cartesian_controller_examples)/etc/examples.rviz" />
            <node name="rviz" pkg="rviz" type="rviz" respawn="false" args="$(arg my_rviz)" output="screen" />
    </group>

    <node pkg="ur5_data_collect_fw" type="spawn_model.py" name="spawn_model"/>
    
</launch>
